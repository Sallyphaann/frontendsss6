name: CI/CD Pipeline for Frontend

on:
  push:
    branches:
      - main  # Trigger the pipeline on push to main branch
  pull_request:
    branches:
      - main  # Trigger on PR to the main branch
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm install
          npm install @babel/plugin-proposal-private-property-in-object --save-dev

      - name: Build frontend
        run: npm run build
  cypress-test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 22  # Use Node.js v22

      - name: Install dependencies
        run: |
          npm install
          npm install @babel/plugin-proposal-private-property-in-object --save-dev
      - name: Pull backend Docker image
        run: |
          docker pull sallyphaan/authenticationcc:latest

      # Step 6: Start the backend in Docker
      - name: Start backend in Docker
        run: |
          docker run -d -p 8081:8081 --name backend-container sallyphaan/authenticationcc:latest
      - name: Start React server
        run: npm start &  # Start the React server in the background
        env:
          CI: true  # Run in CI mode to avoid interactive prompts

      - name: Wait for React server to start
        run: |
          npx wait-on http://localhost:3000  # Wait for the server to be ready
          echo "React server is running!"

      - name: Run Cypress tests
        run: npx cypress run  # Runs Cypress in headless mode
  docker:
    runs-on: ubuntu-latest
    needs: cypress-test
    steps:
   
    - name: Checkout code
      uses: actions/checkout@v3

   
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

    # Step 4: Build Docker image
    - name: Build Docker image
      run: |
        docker build -t sallyphaan/frontendindividualss6:latest .

    # Step 5: Push Docker image to Docker Hub
    - name: Push Docker image
      run: |
        docker push sallyphaan/frontendindividualss6:latest    
  deploy-to-azure:
      runs-on: ubuntu-latest
      needs: docker
      steps:
        - name: Log in to Azure
          uses: azure/login@v1
          with:
            creds: ${{ secrets.AZURE_CREDENTIALS }}
  
        - name: Update Azure Web App to use the new Docker image
          run: |
            az webapp config container set \
              --name frontendapp-service \
              --resource-group circlineRG \
              --docker-custom-image-name sallyphaan/frontendindividualss6:latest

